---
import type { Metadata, FooterData } from '@utils/Interfaces'

interface Props {
  siteName: string
  metadata: Metadata
  footerData: FooterData
  lang?: string
}

import BaseHead from '@components/BaseHead.astro'
import Footer from '@components/Footer.astro'

import { getLangFromUrl } from '@i18n/utils'
const { siteName, metadata, footerData, lang = getLangFromUrl(Astro.url) } = Astro.props
---

<!DOCTYPE html>
<html lang={lang}>
  <BaseHead metadata={metadata} />
  <body
    class="h-screen antialiased text-slate-400 bg-[#211F1F] dark:bg-black dark:text-neutral-200"
  >
    {
      import.meta.env.PUBLIC_MATRIX_MODE === 'true' && (
        <canvas id="matrix-background" class="hidden dark:block" />
      )
    }

    <slot />
    <Footer siteName={siteName} footerData={footerData} />
    <style is:global>
      #matrix-background {
        width: 100%;
        height: 100%;
        position: fixed;
        top: 0;
        left: 0;
        z-index: -1;
        z-index: -1;
      }
    </style>
    <script>
      if (import.meta.env.PUBLIC_MATRIX_MODE === 'true') {
        // Credits Boujjou Achraf. Thank you! Yonedev
        var c = document.getElementById('matrix-background')
        var ctx = c.getContext('2d')

        //making the canvas full screen
        c.height = window.innerHeight
        c.width = window.innerWidth

        //chinese characters - taken from the unicode charset
        var matrix =
          'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789@#$%^&*()*&^%+-/~{[|`]}'
        //converting the string into an array of single characters
        matrix = matrix.split('')

        var font_size = 10
        var columns = c.width / font_size //number of columns for the rain
        //an array of drops - one per column
        var drops = []
        //x below is the x coordinate
        //1 = y co-ordinate of the drop(same for every drop initially)
        for (var x = 0; x < columns; x++) drops[x] = 1

        //drawing the characters
        function draw() {
          //Black BG for the canvas
          //translucent BG to show trail
          ctx.fillStyle = 'rgba(0, 0, 0, 0.04)'
          ctx.fillRect(0, 0, c.width, c.height)

          ctx.fillStyle = '#03A062' //green text
          ctx.font = font_size + 'px arial'
          //looping over drops
          for (var i = 0; i < drops.length; i++) {
            //a random chinese character to print
            var text = matrix[Math.floor(Math.random() * matrix.length)]
            //x = i*font_size, y = value of drops[i]*font_size
            ctx.fillText(text, i * font_size, drops[i] * font_size)

            //sending the drop back to the top randomly after it has crossed the screen
            //adding a randomness to the reset to make the drops scattered on the Y axis
            if (drops[i] * font_size > c.height && Math.random() > 0.975) drops[i] = 0

            //incrementing Y coordinate
            drops[i]++
          }
        }
        setInterval(draw, 35)

        // JavaScript para ajustar el tamaño del canvas al tamaño de toda la página
        function resizeCanvas() {
          const canvas = document.getElementById('c')
          canvas.width = window.innerWidth
          canvas.height = document.documentElement.clientHeight
        }

        window.addEventListener('resize', resizeCanvas)
        resizeCanvas() // Asegurarse de que el canvas tenga el tamaño correcto al cargar la página
      }
    </script>
  </body>
</html>
